var gulp = require('gulp'),
    compass = require('gulp-compass'),
    autoprefixer = require('gulp-autoprefixer'),
    minifycss = require('gulp-clean-css'),
    uglify = require('gulp-uglify'),
    rename = require('gulp-rename'),
    concat = require('gulp-concat'),
    notify = require('gulp-notify'),
    livereload = require('gulp-livereload'),
    plumber = require('gulp-plumber'),
    path = require('path'),
    ngAnnotate = require('gulp-ng-annotate'),
    minifyHtml = require('gulp-minify-html'),
    embedTemplates = require('gulp-angular-embed-templates'),
    ngHtml2Js = require('gulp-ng-html2js'),
    fs = require('fs'),
    q = require('q'),
    pkg = require('./package.json'),
    sourcemaps = require('gulp-sourcemaps');

var notifyInfo = {
    title: 'Gulp',
    icon: path.join(__dirname, 'gulp.png')
};

var plumberErrorHandler = {
    errorHandler: notify.onError({
        title: notifyInfo.title,
        icon: notifyInfo.icon,
        message: "Error: <%= error.message %>"
    })
};


var appName = pkg.name


var stylesToDo = [
    'src/style/*.scss',
];

var htmlToDo = [
    '*.html',
    'src/html/*.html'
];

var app_scripts = [
    'src/script/*.js'
];

var vendor_scripts = [
    'bower_components/angular/angular.min.js',
    'bower_components/angular-cookies/angular-cookies.js',
    'bower_components/angular-resource/angular-resource.js',
    'bower_components/angular-sanitize/angular-sanitize.js',
    'bower_components/angular-route/angular-route.js',
    'bower_components/angular-loader/angular-loader.js',
    'bower_components/angular-animate/angular-animate.min.js'
];


gulp.task('nginx_local', function() {
    var d = q.defer();
    var filename = appName + '.loc.conf';
    var base = path.dirname(fs.realpathSync(__filename)) + '/';
    var file = 'server { listen ' + appName + '.loc; server_name ' + appName + '.loc; root ' + base + '; index index.html; }';

    fs.writeFile('./' + filename, file, function() {
        // fs.symlink(base + filename, '/usr/local/etc/nginx/servers/', function() {
        //     d.resolve(true);
        // });
		d.resolve(true);
    });

    return d.promise;
});


gulp.task('install', function() {
    var d = q.defer();
	var html = '<!doctype html><html ng-app="app"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="description" content=""><meta name="viewport" content="width=device-width"><link rel="stylesheet" href="dist/css/' + appName + '.min.css"><link rel="stylesheet" href="bower_components/font-awesome/css/font-awesome.min.css"></head><body ng-controller="AppCtlr as app"><div ng-view=""></div><script src="dist/js/' + appName + '_vendor.min.js"></script><script src="app.js"></script><script src="dist/js/' + appName + '.min.js"></script></body></html>';

    fs.writeFile('./index.html', html, function() {
		fs.writeFile('./404.html', html, function() {
			var filename = appName + '.loc.conf';
		    var base = path.dirname(fs.realpathSync(__filename)) + '/';
		    var file = 'server { listen ' + appName + '.loc; server_name ' + appName + '.loc; root ' + base + '; index index.html; }';
		    fs.writeFile('./' + filename, file, function() {
		        d.resolve(true);
		    });
	    });
    });

    return d.promise;
});

gulp.task('bower', function() {
    var d = q.defer();
    var bowerJson = {
        _comment: 'THIS FILE IS AUTOMATICALLY GENERATED.  DO NOT EDIT.',
        name: pkg.name,
        version: pkg.version,
        description: pkg.description,
        ignore: [
            ".DS_Store",
            ".git",
            ".gitignore",
            "node_modules",
            "bower_components",
            ".sass-cache",
			"npm-debug.log"
        ],
        dependencies: pkg.bower
    };

    bowerJson = JSON.stringify(bowerJson, null, '\t')

    fs.writeFile('./bower.json', bowerJson, function() {
        d.resolve(true);
    });

    return d.promise;
});

gulp.task('styles', function() {
    return gulp.src(stylesToDo)
        .pipe(plumber(plumberErrorHandler))
        .pipe(gulp.dest('dist/css/build/sass'))
        .pipe(compass({
            css: 'dist/css/build/css',
            sass: 'dist/css/build/sass',
            image: 'app/css/images'
        }))
        .pipe(autoprefixer('last 2 version', 'Safari', 'ie', 'opera', 'ios', 'android', 'chrome', 'firefox'))
        .pipe(concat(appName + '.css'))
        .pipe(rename({
            suffix: '.min'
        }))
        .pipe(minifycss())
        .pipe(gulp.dest('dist/css'));
});


gulp.task('vendor_scripts', function() {
    return gulp.src(vendor_scripts)
        .pipe(plumber(plumberErrorHandler))
        .pipe(concat(appName + '_vendor.min.js'))
        .pipe(gulp.dest('dist/js'))
});


gulp.task('app_scripts', function() {
    return gulp.src(app_scripts)
        .pipe(plumber(plumberErrorHandler))
        .pipe(sourcemaps.init())
        .pipe(ngAnnotate({
            // true helps add where @ngInject is not used. It infers.
            // Doesn't work with resolve, so we must be explicit there
            add: true
        }))
        .pipe(embedTemplates())
        .pipe(concat(appName + '.min.js'))
        .pipe(gulp.dest('dist/js'))
        .pipe(uglify())
        .pipe(sourcemaps.write('./'))
        .pipe(gulp.dest('dist/js'))
});


gulp.task('live', function() {
    livereload.listen();
    gulp.watch(stylesToDo, ['styles']);
    gulp.watch(vendor_scripts, ['vendor_scripts']);
    gulp.watch(app_scripts, ['app_scripts']);
    gulp.watch(htmlToDo, ['app_scripts']);
});

gulp.task('default', [
            'styles',
            'vendor_scripts',
            'app_scripts',
            'live'
        ], function(){});
